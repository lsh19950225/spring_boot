[수업내용정리]
1. controller.MainController.java 추가

2. JPA 사용
	SQL문 작성 -> pstmt.execute() ~ x
	insert into ~
	[ORM] 엔티티 -> DB 연동
	Question 엔티티 클래스
		Question q1 = new Question();
		q1.setSubject("안녕하세요");
		q1.setContent("가입 인사");
		this.question[Repository].save(q1); JPA API save() 메서드
		
3. H2(내장된) 데이터베이스 설치
	- 개발용 사용
	- 자바 기반의 경량(가볍다.) DBMS
	- 빠르게 개발 -> 운영 DBMS(Oracle, MS SQL, My SQL 등등)
	- build.gradle 파일에 모듈 추가
		runtimeOnly 'com.h2database:h2'

4. 설치한 H2 데이터베이스를 사용하기 위한 설정 : application.properties
	spring.h2.console.enabled=true
	- h2 콘솔에 접속
	- 웹 UI
	
	spring.h2.console.path=/h2-console
	- h2 콘솔에 접속 경로 - 툴
	
	spring.datasource.url=jdbc:h2:~/local
	- 데이터베이스에 접속 경로 - 디비 / ~ : 사용자 경로 / local : 데이터베이스 이름
		~ 사용자의 홈 디렉토리 
			ㄴ local.mv.db 데이터베이스 파일 생성
	-- cmd - 관리자 실행
	C:\Windows\System32>cd c:\users\user
	
	c:\Users\user>copy con local.mv.db
	^Z
	        1개 파일이 복사되었습니다.
	
	c:\Users\user>
	--
	spring.datasource.driverClassName=org.h2.Driver
	- 드라이버 클래스명
	
	spring.datasource.username=sa
	- 계정
	
	spring.datasource.password=
	- 비밀번호 / 지금은 안준다.

5. JPA 환경 설정
	h2 데이터베이스 설치 + 파일 생성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

6. 
	1) 질문(Question) 테이블
		속성 이름   			설명
		id   					질문 데이터의 고유 번호
		subject   			질문 데이터의 제목
		content   			질문 데이터의 내용
		createDate   		질문 데이터를 작성한 일시
		
		Hibernate: 
    	create table question (
        id integer generated by default as identity,
        content TEXT,
        create_date timestamp(6),
        subject varchar(200),
        primary key (id)
    	)
		
	2) 답변(Answer) 테이블
		
		id   					답변 데이터의 고유 번호
		question   			질문 데이터 (어떤 질문의 답변인지 알아야 하므로 이 속성이 필요하다.)
		content   			답변 데이터의 내용
		createDate   		답변 데이터를 작성한 일시
		
		Oracle 로 x

7. 질문 엔티티, 답변 엔티티 생성
	question 패키지
	answer 패키지

8. CRUD Repository(==DAO)

9. JUnit 설치
		// Repository
		// CrudRepository
		// PagingAndSortRepository
		// JpaRepository

question		질문 패키지
	ㄴ QuestionController.java 클래스 추가
answer			답변 패키지
controller		메인 컨트롤러

1. 템플릿 엔진 : 템플릿(html + 자바코딩)을 사용하기 위해
	스프링 부트에서 제공되는 템플릿 엔진을 지원( [Thymeleaf], Mustache, Groovy, Freemarker, Velocity 등 )
2. https://www.thymeleaf.org/
3. 
https://www.thymeleaf.org/
4. thymeleaf 모듈 추가
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
5. /question/list 요청
	question 폴더
		ㄴ list.html
		[[  ]] : 로도 사용 가능하다.
		
6. 컨트롤러 -> [서비스] -> 리파지토리
	1) 트랜잭션 처리
	2) 복잡한 코드를 모듈화
	*** 3) 엔티티 객체(DB 동기화)를 DTO 객체로 변환할 수 있다.
	QuestionService.java 추가

loop.index: 루프의 순서(루프의 반복 순서, 0부터 1씩 증가)
loop.count: 루프의 순서(루프의 반복 순서, 1부터 1씩 증가)
loop.size: 반복 객체의 요소 개수(예를 들어 questionList의 요소 개수)
loop.first: 루프의 첫 번째 순서인 경우 true
loop.last: 루프의 마지막 순서인 경우 true
loop.odd: 루프의 홀수 번째 순서인 경우 true
loop.even: 루프의 짝수 번째 순서인 경우 true
loop.current: 현재 대입된 객체(여기서는 question과 동일)

7. 질문 상세 보기

8. [컨트롤러] + [서비스] + 리파지토리
									findById()

9. 답변 기능
	1) detail.html
		답변 작성 : 입력 태그 구성 + ajax
		<form></form>
		/answer/create/2 컨트롤러 추가
	2) 답변 서비스		추가
		답변 repository 수정
		
	|  | : 합칠 때 쓴다.

10. 웹 페이지 디자인
	src/main/resources
		ㄴ static 폴더 안에 css, js 등등 (정적인 페이지)
			ㄴ style.css
	정적파일(css, js 등)의 루트 디렉토리 : static 폴더

11. 부트 스트랩(Bootstrap) 사용한다.
	https://getbootstrap.com
	bootstrap-5.3.3-dist.zip 다운로드 -> 압축 풀기

12. 페이징 모듈화
	만약 : html 문서 구조의 body 요소를 제외한 모든 부분이 동일해서 중복
	타임리프에서는 이런 중복을 제거하기 위해서 "템플릿 상속" 기능을 제공한다.
		ㄴ 1) 기본 틀이 되는 템플릿을 먼저 작성
		ㄴ 2) 그 작성된 템플릿을 상속해서 html 구조 완성